package com.uistack.jetpackcomposedemo3.ui.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.uistack.jetpackcomposedemo3.R
import com.uistack.jetpackcomposedemo3.ui.theme.*

@Composable
fun MenuScreen() {
    Column() {
        MenuToolbar()
        MenuHeadCard()
        MainMenu()
        OptionsUI()

    }
}

@Composable
fun OptionsUI() {
    Row(
        modifier = Modifier
            .padding(horizontal = 18.dp)
            .padding(top = 120.dp).fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly
    ) {
        OptionUI(icon = R.drawable.ic_broom, "Optimize")
        OptionUI(icon = R.drawable.ic_trash, "Clean")
        OptionUI(icon = R.drawable.ic_scan, "Scan")
        OptionUI(icon = R.drawable.ic_bug, "Malware")
    }
}

@Composable
fun OptionUI(icon: Int, text: String) {
    Column(
        modifier = Modifier.width(60.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Card(backgroundColor = Color(0xFFDC79FF), elevation = 0.dp) {
            IconButton(
                onClick = {},
            ) {
                Icon(
                    painter = painterResource(id = icon), contentDescription = "",
                    tint = Background,
                    modifier = Modifier.size(24.dp)
                )
            }
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text(text = text, color = Color.Gray, fontSize = 12.sp, fontWeight = FontWeight.SemiBold)
    }
}

@Composable
fun MainMenu() {
    Column(
        modifier = Modifier
            .padding(horizontal = 28.dp)
            .padding(top = 20.dp)
    ) {
        MenuItemUI(icon = R.drawable.ic_chart, text = "Dashboard", isActive = true,
            onclick = {
                // Handle navigation here
            }
        )
        MenuItemUI(icon = R.drawable.ic_graph, text = "Analytics", onclick = {})
        MenuItemUI(icon = R.drawable.ic_health, text = "Scanning", onclick = {})
        MenuItemUI(icon = R.drawable.ic_report, text = "Report", onclick = {})
        MenuItemUI(icon = R.drawable.ic_setting, text = "Settings", onclick = {})
        MenuItemUI(icon = R.drawable.ic_info, text = "Terms and Agreements", onclick = {})

    }
}

@Composable
fun MenuItemUI(text: String, icon: Int, onclick: () -> Unit, isActive: Boolean = false) {
    TextButton(
        onClick = { onclick() },
        modifier = Modifier.fillMaxWidth()
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(30.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                painter = painterResource(id = icon), contentDescription = "",
                modifier = Modifier.size(30.dp),
                tint = if (isActive) Primary else Color.Gray
            )
            Text(
                text = text,
                modifier = Modifier.padding(start = 20.dp),
                fontSize = 18.sp,
                color = if (isActive) Primary else Color.Gray,
                fontWeight = if (isActive) FontWeight.SemiBold else FontWeight.Normal,
            )
        }
    }

}

@Composable
fun MenuToolbar() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(align = Alignment.Top)
            .padding(horizontal = 10.dp, vertical = 10.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    )
    {
        IconButton(onClick = {}) {
            Icon(
                painter = painterResource(id = R.drawable.ic_close), contentDescription = "",
                tint = Primary,
                modifier = Modifier.size(28.dp)
            )
        }

        Text(
            text = "Protector",
            color = Primary,
            fontFamily = ReemKufi,
            fontSize = 20.sp,
            fontWeight = FontWeight.SemiBold
        )
        IconButton(onClick = {}) {
            Icon(
                painter = painterResource(id = R.drawable.ic_notification), contentDescription = "",
                tint = Primary,
                modifier = Modifier.size(28.dp)
            )
        }
    }
}


@Composable
fun MenuHeadCard() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(18.dp),
        backgroundColor = Color(0xFFF0CBFD),
        elevation = 0.dp
    ) {
        Row(
            modifier = Modifier.padding(20.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_calender), contentDescription = "",
                modifier = Modifier.height(60.dp)
            )
            Column() {
                Text(
                    text = "Next Schedule Deep Scan",
                    modifier = Modifier
                        .padding(horizontal = 10.dp)
                        .padding(top = 8.dp),
                    color = Color.DarkGray,
                    fontFamily = Poppins,
                    fontSize = 14.sp
                )
                Row(
                    modifier = Modifier.height(20.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Tuesday 25 May",
                        modifier = Modifier
                            .padding(start = 10.dp, end = 4.dp)
                            .padding(top = 0.dp),
                        color = Color.Gray,
                        fontFamily = Poppins,
                        fontSize = 12.sp
                    )

                    Icon(
                        painter = painterResource(id = R.drawable.ic_arrow_right),
                        contentDescription = "",
                        tint = Color.Gray,
                        modifier = Modifier.size(14.dp)
                    )
                }

            }
        }

    }
}
