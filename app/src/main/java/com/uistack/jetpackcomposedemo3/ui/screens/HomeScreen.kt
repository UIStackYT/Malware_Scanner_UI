package com.uistack.jetpackcomposedemo3.ui.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.uistack.jetpackcomposedemo3.R
import com.uistack.jetpackcomposedemo3.ui.theme.*

@Composable
fun HomeScreen() {
    Column {
        Toolbar()
        MainCard()
        SearchBox()
        OverviewUI()
        RelatedConcernsUI()
    }
}

@Composable
fun RelatedConcernsUI() {
    Row(
        modifier = Modifier
            .padding(horizontal = 26.dp, vertical = 16.dp)
            .fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = "Related Concern",
            color = TextColor,
            fontFamily = Poppins,
            fontSize = 18.sp,
            fontWeight = FontWeight.SemiBold
        )
        Icon(
            painter = painterResource(id = R.drawable.ic_more), contentDescription = "",
            tint = TextColor,
            modifier = Modifier.padding(end = 6.dp)
        )
    }
    LazyRow(modifier = Modifier.padding(start = 18.dp)) {
        item {
            ConcernItemUI("Virus Spike")
            ConcernItemUI("Malware")
            ConcernItemUI("Trojan")
            ConcernItemUI("Spam Data")
        }
    }
}

@Composable
fun ConcernItemUI(text: String) {
    OutlinedButton(
        onClick = {}, elevation = ButtonDefaults.elevation(defaultElevation = 0.dp),
        colors = ButtonDefaults.outlinedButtonColors(
            contentColor = Primary
        ),
        shape = Shapes.large,
        border = ButtonDefaults.outlinedBorder,
        modifier = Modifier.padding(end = 6.dp)
    ) {
        Text(text = text)
    }
}

@Composable
fun Toolbar() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(align = Alignment.Top)
            .padding(horizontal = 10.dp, vertical = 10.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    )
    {
        IconButton(onClick = {}) {
            Icon(
                painter = painterResource(id = R.drawable.ic_menu), contentDescription = "",
                tint = Primary,
                modifier = Modifier.size(28.dp)
            )
        }

        Text(
            text = "Protector",
            color = Primary,
            fontFamily = ReemKufi,
            fontSize = 20.sp,
            fontWeight = FontWeight.SemiBold
        )
        IconButton(onClick = {}) {
            Icon(
                painter = painterResource(id = R.drawable.ic_notification), contentDescription = "",
                tint = Primary,
                modifier = Modifier.size(28.dp)
            )
        }
    }
}

@Composable
fun MainCard() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(160.dp)
            .padding(horizontal = 18.dp, vertical = 10.dp),
        backgroundColor = Primary,
        elevation = 0.dp,
        shape = Shapes.large
    ) {

        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_sheild2),
                contentDescription = "",
                modifier = Modifier
                    .padding(20.dp),
                alignment = Alignment.CenterStart
            )

            Column(
                modifier = Modifier
                    .fillMaxHeight()
                    .padding(top = 20.dp)
            ) {
                Text(
                    text = "Summary Status",
                    color = SecondaryText,
                    fontSize = 14.sp,
                    fontFamily = Poppins
                )
                Text(
                    text = "Scanning Needed!",
                    color = HeadText,
                    fontSize = 16.sp,
                    fontFamily = Poppins
                )
                Spacer(modifier = Modifier.height(10.dp))
                Button(
                    onClick = {},
                    modifier = Modifier.clip(shape = Shapes.large),
                    colors = ButtonDefaults.buttonColors(
                        backgroundColor = Secondary,
                        contentColor = HeadText
                    )
                ) {
                    Text(text = "Scan Now")
                }
            }
        }

    }
}


@Composable
fun SearchBox() {
    var text by remember { mutableStateOf("") }
    TextField(
        value = text,
        onValueChange = {
            text = it
        },
        label = null,
        placeholder = { Text("Search Something . . .", color = Primary) },
        colors = TextFieldDefaults.textFieldColors(
            backgroundColor = Color.White,
            focusedIndicatorColor = Color.Transparent,
            unfocusedIndicatorColor = Color.Transparent
        ),
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 18.dp)
            .padding(top = 10.dp, bottom = 8.dp)
            .clip(Shapes.large),
        trailingIcon = {
            Icon(
                painter = painterResource(id = R.drawable.ic_search),
                contentDescription = "",
                tint = Primary,
                modifier = Modifier.size(20.dp)
            )
        }
    )
}

@Composable
fun OverviewUI() {
    Row(
        modifier = Modifier
            .padding(horizontal = 26.dp, vertical = 10.dp)
            .fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = "Overview",
            color = TextColor,
            fontFamily = Poppins,
            fontSize = 18.sp,
            fontWeight = FontWeight.SemiBold
        )
        Icon(
            painter = painterResource(id = R.drawable.ic_more), contentDescription = "",
            tint = TextColor,
            modifier = Modifier.padding(end = 6.dp)
        )
    }
    Row(
        Modifier
            .fillMaxWidth()
            .padding(horizontal = 14.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        DataCard(
            icon = R.drawable.ic_shield_cross,
            mainText = "Threat Activity",
            subText = "Total Count",
            data = "778",
            arrow = R.drawable.arrow_top_right,
            statsColor = PrimaryGreen,
            stats = "+1.2%"
        )
        DataCard(
            icon = R.drawable.ic_security_user,
            mainText = "User",
            subText = "Distinct Count",
            data = "478",
            arrow = R.drawable.arrow_top_right,
            statsColor = PrimaryGreen,
            stats = "+1.2%"
        )
    }

    Row(
        Modifier
            .fillMaxWidth()
            .padding(horizontal = 14.dp)
            .padding(top = 16.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        DataCard(
            icon = R.drawable.ic_cloud,
            mainText = "Cloud Activity",
            subText = "Email Count",
            data = "9K",
            arrow = R.drawable.ic_arrow_bottom_right,
            statsColor = StatsBlue,
            stats = "0%"
        )
        DataCard(
            icon = R.drawable.ic_radar,
            mainText = "Infected",
            subText = "System Count",
            data = "219",
            arrow = R.drawable.ic_arrow_bottom_right,
            statsColor = StatsRed,
            stats = "-5.1%"
        )
    }
}

@Composable
fun DataCard(
    modifier: Modifier = Modifier,
    icon: Int,
    mainText: String,
    subText: String,
    data: String,
    arrow: Int,
    stats: String,
    statsColor: Color
) {
    Card(
        modifier = modifier
            .padding(horizontal = 4.dp)
            .width(154.dp)
            .clip(Shapes.medium),
        elevation = 0.dp
    ) {
        Column(Modifier.padding(horizontal = 12.dp, vertical = 12.dp)) {
            Row {
                Icon(
                    modifier = Modifier
                        .clip(CircleShape)
                        .background(IconBackground)
                        .size(36.dp)
                        .padding(5.dp),
                    tint = Primary,
                    painter = painterResource(id = icon),
                    contentDescription = ""
                )
                Column(Modifier.padding(start = 10.dp)) {
                    Text(
                        text = mainText,
                        color = Color.DarkGray,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp
                    )
                    Text(
                        text = subText,
                        color = Color.Gray,
                        fontWeight = FontWeight.Medium,
                        fontSize = 10.sp
                    )
                }
            }
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                modifier = Modifier.width(130.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = data,
                    color = Color.Gray,
                    fontSize = 34.sp,
                    fontWeight = FontWeight.ExtraBold
                )
                Column {
                    Icon(
                        painter = painterResource(id = arrow),
                        contentDescription = "",
                        tint = statsColor,
                        modifier = Modifier.size(20.dp)
                    )
                    Text(
                        text = stats,
                        color = statsColor,
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }
        }
    }
}
