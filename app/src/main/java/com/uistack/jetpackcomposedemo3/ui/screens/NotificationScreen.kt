package com.uistack.jetpackcomposedemo3.ui.screens

import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.Icon
import androidx.compose.material.Text
import androidx.compose.material.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.uistack.jetpackcomposedemo3.R
import com.uistack.jetpackcomposedemo3.ui.theme.*

//https://dribbble.com/shots/17178615-Vase-Store-App

@Composable
fun NotificationScreen() {
    Column() {
        MainToolbar()
        NotificationList()
    }
}

@Composable
fun NotificationList() {
    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp),
        contentPadding = PaddingValues(bottom = 60.dp)
    ) {
        item {
            Text(
                text = "Today",
                fontFamily = Poppins,
                color = IconColor,
                fontWeight = FontWeight.SemiBold,
                fontSize = 14.sp
            )

            NotificationItem(
                icon = R.drawable.ic_shield_i,
                mainText = "Security Alert",
                subText = "We have found some security threat"
            )
            NotificationItem(
                icon = R.drawable.ic_optimize,
                mainText = "Optimize",
                subText = "Time to Optimize your system"
            )
            NotificationItem(
                icon = R.drawable.ic_shield_tick,
                mainText = "Scanning Completed",
                subText = "No major issue found in this scan"
            )
            NotificationItem(
                icon = R.drawable.ic_information,
                mainText = "Changes in Terms",
                subText = "We made some changes in terms"
            )
        }

        item {

            Text(
                text = "Yesterday",
                fontFamily = Poppins,
                color = IconColor,
                fontWeight = FontWeight.SemiBold,
                fontSize = 14.sp,
                modifier = Modifier.padding(top = 20.dp)
            )

            NotificationItem(
                icon = R.drawable.ic_shield_i,
                mainText = "Security Alert",
                subText = "We have found some security threat"
            )
            NotificationItem(
                icon = R.drawable.ic_optimize,
                mainText = "Optimize",
                subText = "Time to Optimize your system"
            )
            NotificationItem(
                icon = R.drawable.ic_shield_tick,
                mainText = "Scanning Completed",
                subText = "No major issue found in this scan"
            )
            NotificationItem(
                icon = R.drawable.ic_information,
                mainText = "Changes in Terms",
                subText = "We made some changes in terms"
            )

        }
        item {

            Text(
                text = "Mon, 22 jan",
                fontFamily = Poppins,
                color = IconColor,
                fontWeight = FontWeight.SemiBold,
                fontSize = 14.sp,
                modifier = Modifier.padding(top = 20.dp)
            )

            NotificationItem(
                icon = R.drawable.ic_shield_i,
                mainText = "Security Alert",
                subText = "We have found some security threat"
            )
            NotificationItem(
                icon = R.drawable.ic_optimize,
                mainText = "Optimize",
                subText = "Time to Optimize your system"
            )
            NotificationItem(
                icon = R.drawable.ic_shield_tick,
                mainText = "Scanning Completed",
                subText = "No major issue found in this scan"
            )
            NotificationItem(
                icon = R.drawable.ic_information,
                mainText = "Changes in Terms",
                subText = "We made some changes in terms"
            )

        }

    }
}

@Composable
fun NotificationItem(icon: Int, mainText: String, subText: String) {
    TextButton(
        onClick = {},
        modifier = Modifier.fillMaxWidth(),
        contentPadding = PaddingValues(0.dp),
    ) {
        Row(
            modifier = Modifier
                .padding(vertical = 10.dp)
                .fillMaxWidth()
                .height(40.dp)
//            .border(width = 1.dp, shape = RectangleShape, color = IconColor)
            ,
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row() {
                Icon(
                    painter = painterResource(id = icon), contentDescription = "",
                    modifier = Modifier.size(30.dp),
                    tint = IconColor2
                )
                Column(
                    modifier = Modifier.padding(start = 10.dp)
                ) {
                    Text(
                        text = mainText,
                        fontFamily = Poppins,
                        fontWeight = FontWeight.SemiBold,
                        color = IconColor2,
                        lineHeight = 10.sp,
                        fontSize = 12.sp,
                        letterSpacing = 0.sp
                    )
                    Text(
                        text = subText,
                        fontFamily = Poppins,
                        fontWeight = FontWeight.Medium,
                        color = IconColor3,
                        lineHeight = 10.sp,
                        fontSize = 11.sp,
                        letterSpacing = 0.sp,
                        modifier = Modifier
                            .offset(y = (-4).dp)
                    )
                }
            }

            Icon(
                painter = painterResource(id = R.drawable.ic_arrow_right), contentDescription = "",
                modifier = Modifier.size(24.dp),
                tint = IconColor3
            )
        }
    }
}

@Composable
fun MainToolbar() {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(align = Alignment.Top)
            .padding(horizontal = 10.dp, vertical = 30.dp),
        horizontalArrangement = Arrangement.SpaceAround,
        verticalAlignment = Alignment.CenterVertically
    )
    {
//        Spacer(modifier = Modifier.width(20.dp))

        Text(
            text = "Notifications",
            color = IconColor,
            fontFamily = ReemKufi,
            fontSize = 24.sp,
            fontWeight = FontWeight.SemiBold
        )
//        IconButton(onClick = {}) {
//            Icon(
//                painter = painterResource(id = R.drawable.ic_close), contentDescription = "",
//                tint = IconColor,
//                modifier = Modifier.size(28.dp)
//            )
//        }
    }

}
